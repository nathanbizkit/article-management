// Code generated by mockery v2.46.0. DO NOT EDIT.

package env

import mock "github.com/stretchr/testify/mock"

// ENVer is an autogenerated mock type for the ENVer type
type ENVer struct {
	mock.Mock
}

type ENVer_Expecter struct {
	mock *mock.Mock
}

func (_m *ENVer) EXPECT() *ENVer_Expecter {
	return &ENVer_Expecter{mock: &_m.Mock}
}

// AppMode provides a mock function with given fields:
func (_m *ENVer) AppMode() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AppMode")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ENVer_AppMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppMode'
type ENVer_AppMode_Call struct {
	*mock.Call
}

// AppMode is a helper method to define mock.On call
func (_e *ENVer_Expecter) AppMode() *ENVer_AppMode_Call {
	return &ENVer_AppMode_Call{Call: _e.mock.On("AppMode")}
}

func (_c *ENVer_AppMode_Call) Run(run func()) *ENVer_AppMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ENVer_AppMode_Call) Return(_a0 string) *ENVer_AppMode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ENVer_AppMode_Call) RunAndReturn(run func() string) *ENVer_AppMode_Call {
	_c.Call.Return(run)
	return _c
}

// AppPort provides a mock function with given fields:
func (_m *ENVer) AppPort() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AppPort")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ENVer_AppPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppPort'
type ENVer_AppPort_Call struct {
	*mock.Call
}

// AppPort is a helper method to define mock.On call
func (_e *ENVer_Expecter) AppPort() *ENVer_AppPort_Call {
	return &ENVer_AppPort_Call{Call: _e.mock.On("AppPort")}
}

func (_c *ENVer_AppPort_Call) Run(run func()) *ENVer_AppPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ENVer_AppPort_Call) Return(_a0 string) *ENVer_AppPort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ENVer_AppPort_Call) RunAndReturn(run func() string) *ENVer_AppPort_Call {
	_c.Call.Return(run)
	return _c
}

// AuthCookieDomain provides a mock function with given fields:
func (_m *ENVer) AuthCookieDomain() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthCookieDomain")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ENVer_AuthCookieDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthCookieDomain'
type ENVer_AuthCookieDomain_Call struct {
	*mock.Call
}

// AuthCookieDomain is a helper method to define mock.On call
func (_e *ENVer_Expecter) AuthCookieDomain() *ENVer_AuthCookieDomain_Call {
	return &ENVer_AuthCookieDomain_Call{Call: _e.mock.On("AuthCookieDomain")}
}

func (_c *ENVer_AuthCookieDomain_Call) Run(run func()) *ENVer_AuthCookieDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ENVer_AuthCookieDomain_Call) Return(_a0 string) *ENVer_AuthCookieDomain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ENVer_AuthCookieDomain_Call) RunAndReturn(run func() string) *ENVer_AuthCookieDomain_Call {
	_c.Call.Return(run)
	return _c
}

// AuthSecretKey provides a mock function with given fields:
func (_m *ENVer) AuthSecretKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthSecretKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ENVer_AuthSecretKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthSecretKey'
type ENVer_AuthSecretKey_Call struct {
	*mock.Call
}

// AuthSecretKey is a helper method to define mock.On call
func (_e *ENVer_Expecter) AuthSecretKey() *ENVer_AuthSecretKey_Call {
	return &ENVer_AuthSecretKey_Call{Call: _e.mock.On("AuthSecretKey")}
}

func (_c *ENVer_AuthSecretKey_Call) Run(run func()) *ENVer_AuthSecretKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ENVer_AuthSecretKey_Call) Return(_a0 string) *ENVer_AuthSecretKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ENVer_AuthSecretKey_Call) RunAndReturn(run func() string) *ENVer_AuthSecretKey_Call {
	_c.Call.Return(run)
	return _c
}

// CorsAllowedOrigins provides a mock function with given fields:
func (_m *ENVer) CorsAllowedOrigins() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CorsAllowedOrigins")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ENVer_CorsAllowedOrigins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CorsAllowedOrigins'
type ENVer_CorsAllowedOrigins_Call struct {
	*mock.Call
}

// CorsAllowedOrigins is a helper method to define mock.On call
func (_e *ENVer_Expecter) CorsAllowedOrigins() *ENVer_CorsAllowedOrigins_Call {
	return &ENVer_CorsAllowedOrigins_Call{Call: _e.mock.On("CorsAllowedOrigins")}
}

func (_c *ENVer_CorsAllowedOrigins_Call) Run(run func()) *ENVer_CorsAllowedOrigins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ENVer_CorsAllowedOrigins_Call) Return(_a0 []string) *ENVer_CorsAllowedOrigins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ENVer_CorsAllowedOrigins_Call) RunAndReturn(run func() []string) *ENVer_CorsAllowedOrigins_Call {
	_c.Call.Return(run)
	return _c
}

// DBHost provides a mock function with given fields:
func (_m *ENVer) DBHost() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DBHost")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ENVer_DBHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBHost'
type ENVer_DBHost_Call struct {
	*mock.Call
}

// DBHost is a helper method to define mock.On call
func (_e *ENVer_Expecter) DBHost() *ENVer_DBHost_Call {
	return &ENVer_DBHost_Call{Call: _e.mock.On("DBHost")}
}

func (_c *ENVer_DBHost_Call) Run(run func()) *ENVer_DBHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ENVer_DBHost_Call) Return(_a0 string) *ENVer_DBHost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ENVer_DBHost_Call) RunAndReturn(run func() string) *ENVer_DBHost_Call {
	_c.Call.Return(run)
	return _c
}

// DBName provides a mock function with given fields:
func (_m *ENVer) DBName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DBName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ENVer_DBName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBName'
type ENVer_DBName_Call struct {
	*mock.Call
}

// DBName is a helper method to define mock.On call
func (_e *ENVer_Expecter) DBName() *ENVer_DBName_Call {
	return &ENVer_DBName_Call{Call: _e.mock.On("DBName")}
}

func (_c *ENVer_DBName_Call) Run(run func()) *ENVer_DBName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ENVer_DBName_Call) Return(_a0 string) *ENVer_DBName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ENVer_DBName_Call) RunAndReturn(run func() string) *ENVer_DBName_Call {
	_c.Call.Return(run)
	return _c
}

// DBPass provides a mock function with given fields:
func (_m *ENVer) DBPass() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DBPass")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ENVer_DBPass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBPass'
type ENVer_DBPass_Call struct {
	*mock.Call
}

// DBPass is a helper method to define mock.On call
func (_e *ENVer_Expecter) DBPass() *ENVer_DBPass_Call {
	return &ENVer_DBPass_Call{Call: _e.mock.On("DBPass")}
}

func (_c *ENVer_DBPass_Call) Run(run func()) *ENVer_DBPass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ENVer_DBPass_Call) Return(_a0 string) *ENVer_DBPass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ENVer_DBPass_Call) RunAndReturn(run func() string) *ENVer_DBPass_Call {
	_c.Call.Return(run)
	return _c
}

// DBPort provides a mock function with given fields:
func (_m *ENVer) DBPort() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DBPort")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ENVer_DBPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBPort'
type ENVer_DBPort_Call struct {
	*mock.Call
}

// DBPort is a helper method to define mock.On call
func (_e *ENVer_Expecter) DBPort() *ENVer_DBPort_Call {
	return &ENVer_DBPort_Call{Call: _e.mock.On("DBPort")}
}

func (_c *ENVer_DBPort_Call) Run(run func()) *ENVer_DBPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ENVer_DBPort_Call) Return(_a0 string) *ENVer_DBPort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ENVer_DBPort_Call) RunAndReturn(run func() string) *ENVer_DBPort_Call {
	_c.Call.Return(run)
	return _c
}

// DBUser provides a mock function with given fields:
func (_m *ENVer) DBUser() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DBUser")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ENVer_DBUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBUser'
type ENVer_DBUser_Call struct {
	*mock.Call
}

// DBUser is a helper method to define mock.On call
func (_e *ENVer_Expecter) DBUser() *ENVer_DBUser_Call {
	return &ENVer_DBUser_Call{Call: _e.mock.On("DBUser")}
}

func (_c *ENVer_DBUser_Call) Run(run func()) *ENVer_DBUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ENVer_DBUser_Call) Return(_a0 string) *ENVer_DBUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ENVer_DBUser_Call) RunAndReturn(run func() string) *ENVer_DBUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewENVer creates a new instance of ENVer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewENVer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ENVer {
	mock := &ENVer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
